#!/bin/bash

# Resolve repository root so script can be run from any cwd
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$REPO_ROOT" || exit 1

# Available Keycloak versions (major.minor)
KEYCLOAK_VERSIONS=("25.0" "26.0" "26.1" "26.2" "26.3")

# Function to validate Keycloak version
validate_version() {
    local version=$1

    # Skip validation for "all"
    if [ "$version" == "all" ]; then
        return 0
    fi

    # Check if version is in the supported list
    for supported_version in "${KEYCLOAK_VERSIONS[@]}"; do
        if [ "$version" == "$supported_version" ]; then
            return 0
        fi
    done

    # Version not found
    echo "[ERROR] Unsupported Keycloak version: $version"
    echo "Supported versions: ${KEYCLOAK_VERSIONS[*]} or 'all'"
    return 1
}

show_help() {
    echo -e "Keycloak CloudFront Auth Build Script\n"
    echo -e "Usage: $0 [KEYCLOAK_VERSION] [BUILD_SUFFIX]\n"
    echo "Arguments:"
    echo "  - KEYCLOAK_VERSION:     Keycloak version to build (${KEYCLOAK_VERSIONS[*]} or all). Default: all"
    echo "  - BUILD_SUFFIX:         Build suffix (SNAPSHOT, BETA, RC1, FINAL...). FINAL = no suffix. Default: SNAPSHOT"
    echo -e "\nExamples:"
    echo "  $0              # Build all versions with -SNAPSHOT"
    echo "  $0 26.0         # Build Keycloak 26.0 with -SNAPSHOT"
    echo "  $0 26.0 BETA    # Build Keycloak 26.0 with -BETA"
    echo "  $0 26.0 FINAL   # Build Keycloak 26.0 without suffix"
    echo "  $0 all RC1      # Build all versions with -RC1"
    echo -e "\nOptions:"
    echo -e "  -h, --help, help    Show this help\n"
    echo "Supported Keycloak versions: ${KEYCLOAK_VERSIONS[*]}"
}

# Check if help is requested (check both arguments)
if [[ "$1" == "-h" || "$1" == "--help" || "$1" == "help" || "$1" == "?" ]] || \
   [[ "$2" == "-h" || "$2" == "--help" || "$2" == "help" || "$2" == "?" ]]; then
    show_help
    exit 0
fi

# Arguments
KEYCLOAK_VERSION=${1:-"all"}
BUILD_SUFFIX_RAW=${2:-"SNAPSHOT"}

# Validate the Keycloak version
if ! validate_version "$KEYCLOAK_VERSION"; then
    exit 1
fi

# Add dash automatically to suffix, except for FINAL
if [ "$BUILD_SUFFIX_RAW" == "FINAL" ]; then
    BUILD_SUFFIX=""
else
    BUILD_SUFFIX="-$BUILD_SUFFIX_RAW"
fi

# Ensure a fresh dist/ directory for each build
# Empty existing contents if the directory exists, otherwise create it
if [ -d "dist" ]; then
    echo "Cleaning existing dist/ directory..."
    rm -rf dist/*
else
    echo "Creating dist/ directory..."
fi
mkdir -p dist

# Configure mvn options: add --no-transfer-progress when running inside GitHub Actions
if [ "${GITHUB_ACTIONS:-false}" = "true" ]; then
    mvn_opts="--no-transfer-progress"
else
    mvn_opts=""
fi

# Variables for summary
SUCCESSFUL_BUILDS=()
FAILED_BUILDS=()

build_version() {
    local kc_version=$1
    local build_suffix=$2
    
    # Split version into major and minor (e.g., 26.3 -> major=26 minor=3)
    local kc_major_part="${kc_version%%.*}"
    local kc_minor_part="${kc_version#*.}"

    echo "Building for Keycloak $kc_version (suffix: $build_suffix)"

    # Pass both major and minor to Maven properties keycloak-version.major/minor
    mvn $mvn_opts clean package -Dkeycloak-version.major=$kc_major_part -Dkeycloak-version.minor=$kc_minor_part -Dbuild-suffix=$build_suffix

    if [ $? -eq 0 ]; then
        # JAR name will be automatically generated by Maven with the full version
        local jar_name=$(ls target/keycloak-cloudfront-auth-*KC${kc_version}*.jar 2>/dev/null | head -1)
        local jar_basename=$(basename "$jar_name")
        local output_dir="dist"
        
        if [ -f "$jar_name" ]; then
            # Create builds folder if it doesn't exist
            mkdir -p $output_dir
            # Move JAR to builds folder
            mv "$jar_name" "$output_dir/"
            echo "[SUCCESS] Build successful: $output_dir/$jar_basename"
            SUCCESSFUL_BUILDS+=("$output_dir/$jar_basename")
        else
            echo "[ERROR] JAR file not found in target/"
            FAILED_BUILDS+=("Keycloak $kc_version")
        fi
    else
        echo "[ERROR] Build failed for Keycloak $kc_version"
        FAILED_BUILDS+=("Keycloak $kc_version")
    fi
}

if [ "$KEYCLOAK_VERSION" == "all" ]; then
    echo "Building all Keycloak versions..."
    for kc_version in "${KEYCLOAK_VERSIONS[@]}"; do
        build_version $kc_version $BUILD_SUFFIX
    done
else
    build_version $KEYCLOAK_VERSION $BUILD_SUFFIX
fi

# Summary
echo ""
echo "Build Summary:"
if [ ${#SUCCESSFUL_BUILDS[@]} -gt 0 ]; then
    echo "Successfully built versions:"
    for jar_path in "${SUCCESSFUL_BUILDS[@]}"; do
        echo "  - $jar_path"
    done
else
    echo "No versions were built successfully."
fi

if [ ${#FAILED_BUILDS[@]} -gt 0 ]; then
    echo "Failed versions:"
    for version in "${FAILED_BUILDS[@]}"; do
        echo "  - $version"
    done
else
    echo "No errors detected."
fi
